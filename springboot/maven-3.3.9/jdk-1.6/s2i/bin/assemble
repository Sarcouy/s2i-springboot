#!/bin/bash

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n "Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2
  fi
}

env

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

# Resulting JAR files will be deployed to $SPRINGBOOT_HOME/standalone/deployments
DEPLOY_DIR=$SPRINGBOOT_HOME
mkdir -p $DEPLOY_DIR

# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/$POM_PATH/pom.xml" ]; then

  if [ -z "$INCREMENTAL" ]; then
    export INCREMENTAL=false
  fi

  if [[ "$INCREMENTAL" = "true" ]]; then 
    # restore any maven dependencies which will be present if this is an
    # incremental build
    restore_saved_artifacts
  fi

  pushd $LOCAL_SOURCE_DIR/$POM_PATH &> /dev/null

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -DskipTests"
  fi

  # If MAVEN_SETTINGS specified will always add to MAVEN_ARGS
  # Can be relative to application root
  # Can be global to image
  if [ -z "$MAVEN_SETTINGS" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS -s $HOME/.m2/settings.xml"
  else
    if [[ "$MAVEN_SETTINGS" = /* ]]; then
       [ ! -e "$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in the image. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $MAVEN_SETTINGS"
    else
       [ ! -e "$LOCAL_SOURCE_DIR/$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in your source code. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/$MAVEN_SETTINGS"
   fi
  fi

  #Append user provided args
  if [ -n "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi
  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"

  mvn --version
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn $MAVEN_ARGS"
    exit $ERR
  fi

  echo "Cleaning $DEPLOY_DIR..."
  rm -rf $DEPLOY_DIR/*

  echo "Moving built war file `find -name $JAR_NAME` into $DEPLOY_DIR for later deployment..."

  mv `find -name $JAR_NAME` $DEPLOY_DIR

  if [[ "$INCREMENTAL" = "false" ]]; then
    rm -rf . .m2
  fi
  popd &> /dev/null
else
  echo "Moving binaries in source directory into $DEPLOY_DIR for later deployment..."
  mv `find -name $JAR_NAME` $DEPLOY_DIR
  
ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from moving $JAR_NAME file, maybe it doesn't exist "
    exi $ERR
  fi
fi

echo "...done"

exit $rc
